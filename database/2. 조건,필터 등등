-- soccer 테이블 생성 구문
create table soccer(
rank number(2),
name varchar2(21),
win number(2),
draw number(2),
lose number(2)
);
drop table soccer;

-- account 테이블 생성 구문
create table account(
owner varchar2(21),
base_rate number(5,2),
plus_rate number(5,2),
monthly number,
period number(3)
);
drop table account;

-- player 테이블 생성 구문
create table player(
name varchar2(21),
event varchar2(60),
type char(6),
gold number(3),
silver number(3),
bronze number(3)
);

drop table player;

-- 테이블을 만들고 데이터를 추가하도록 코드 작성

-- 테이블 생성
create table student(
name varchar2(21),
score number(3)
);

-- 데이터 추가
-- insert into 테이블이름(형식들) values(값들);
-- (주의) 오라클에서 문자열은 외따옴표를 쓴다
insert into student(name, score) values('홍길동', 50);

-- 데이터 조회
-- select * from 테이블이름;
select * from student;



-- 통신사 요금제 테이블 생성 및 데이터 추가 코드
create table plan(
telecom char(2),
name varchar2(60),
month_price number,
data_gb number(4),
call_min number(4),
sms_count number(4)
);
drop table plan;

insert into plan(telecom, name, month_price, data_gb, call_min, sms_count)
values('SK', '5G언택트 52', 52000, 200, 1000, 2000);
insert into plan(telecom, name, month_price, data_gb, call_min, sms_count)
values('KT', '5G세이브', 45000, 100, 900, 1500);
insert into plan(telecom, name, month_price, data_gb, call_min, sms_count)
values('LG', '5G시그니처', 130000, 500, 2000, 2500);

select * from plan;

/*
	테이블 제약조건(table consetraint)
	- 테이블에 추가되는 데이터에 대한 조건을 설정할 수 있다
	- 종류는 null, 중복 , 값의범위 or 조건 등이 있다 
	- null을 허용하지 않으려면 컬럼 옆에 not null 키워드를 추가한다 
	- 중복을 허용하지 않으려면 컬럼 옆에 unique 키워드를 추가한다
	- 허용되는 값을 지정하려면 컬럼 옆에 check 키워드를 추가한다
 **/

create table menu(
menu_name varchar2(60)not null unique 
	check(regexp_like(menu_name,'^[가-힣]+$')), --regexp 레귤러 익스프레션 
menu_type varchar2(9)not null check(menu_type in ('디저트' , '음료')),
menu_price number not null check(menu_price >= 0),
--menu_event char(1) not null check(menu_event = 'Y' or menu_event = 'N')
menu_event char(1) not null check(menu_event IN ('Y' , 'N'))
);
drop table menu;

insert into menu(menu_name,menu_type,menu_price,menu_event)
values('아메 리카노','디저트',3000,'Y');
select * from menu;



create table class(
program varchar2(60) not null unique,
class_time number not null 
	check(class_time > 0 and mod(class_time,30) = 0),
class_pay number not null check(class_pay >= 0),
onoff char(12) not null check(onoff IN ('온라인' , '오프라인' , '혼합'))
);

drop table class;

insert into class(program , class_time , class_pay , onoff)
values('자바 마스터 과정' , 91 , 1000000 , '온라인');
insert into class(program , class_time , class_pay , onoff)
values('파이썬 기초' , 60 , 600000 , '온라인');
insert into class(program , class_time , class_pay , onoff)
values('웹 개발자 단기완성' , 120 , 1200000 , '오프라인');
select * from class;
-------------------------------------------------------------------------

create table phone(
phone_name varchar2(60) not null,
phone_telecom varchar2(6) not null check(phone_telecom in ('SK' , 'KT' , 'LG')),
phone_price number not null check(phone_price >= 0),
phone_contract number(2) check(phone_contractin (0,24,36)),
--이름 + 통신사를 합쳐서 같은 경우는 없다
unique(phone_name , phone_telecom)
);

drop table phone;

insert into phone(phone_name , phone_telecom , phone_price , phone_contract)
values('갤럭시Fold4' , 'SK' , 18000000, null);
insert into phone(phone_name , phone_telecom , phone_price , phone_contract)
values('갤럭시Fold4' , 'KT' , 1750000 , 24);
insert into phone(phone_name , phone_telecom , phone_price , phone_contract)
values('아이폰 15' , 'LG' , 2000000 , 30);
insert into phone(phone_name , phone_telecom , phone_price , phone_contract)
values('아이폰 15' , 'SK' , 1990000 , null);
select * from phone;

/*
  	기본키(Primary key)
  	- 테이블에 단 한개만 설정할 수 있는 유일한 불변값
  	- 대표항목 역할을 하며 not null + unique 효과를 가짐
  	- 회원으로 치면 "아이디" 와 "닉네임" 중에서 "아이디"가 기본키 역할을 수행할 수 있다
  	- 모든 항목 중에 가장 검색 속도가 빠름
  	- 테이블 당 1개를 반드시 만들 것을 권장(없으면 번호라도 생성해서 지정)
 */

create table pocketmon(
pocketmon_no number primary key,
pocketmon_name varchar2(30) not null,
pocketmon_type varchar2(9) not null
);
drop table pocketmon;
insert into pocketmon(pocketmon_no , pocketmon_name , pocketmon_type)
values(1 , '이상해씨' , '풀');
insert into pocketmon(pocketmon_no , pocketmon_name , pocketmon_type)
values(4 , '파이리' , '불꽃');
insert into pocketmon(pocketmon_no , pocketmon_name , pocketmon_type)
values(7 , '꼬부기' , '물');
select * from pocketmon;

-----------------------------------------------
--varchar2 -4000 , char -2000
create table board(
board_no number primary key,
board_title varchar2(300) not null,  check(regexp_like(board_title,'^[가-힣 ]+$')),
board_content varchar2(1500) not null, 
board_writer varchar2(20) not null check(regexp_like(board_writer,'^[a-z0-9]{8,20}$')),
board_readcount number not null check(board_readcount >= 0)
);
drop table board;

insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(1 , '첫번째 계시물' , '김현우' , 'dagun1234' , 10);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(2 , '두번째 계시물' , '김현우 입니다 저는 학원을 다니며 자바라는 프로그램...' , 'dagun1234' , 100);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(3 , '세번째 계시물' , '안녕하세요.' , 'kyutae5434' , 1500);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(4 , '네번째 계시물' , '안녕하세요~~' , 'kh13java' , 2000000);
SELECT * FROM board;
-----------------------------------------------
--풀이
create table board(
board_no number primary key,
board_title varchar2(300) not null,
board_content varchar2(4000) not null, 
board_writer varchar2(20)  
	check(regexp_like(board_writer,'^[a-zA-Z0-9]{8,20}$')), --null이 가능함
board_readcount number not null check(board_readcount >= 0)
);
drop table board;

insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(1 , '첫번째 계시물' , '김현우' , 'dagun1234' , 10);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(2 , '두번째 계시물' , '김현우 입니다 저는 학원을 다니며 자바라는 프로그램...' , 'dagun1234' , 100);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(3 , '세번째 계시물' , '안녕하세요.' , 'kyutae5434' , 1500);
insert into board(board_no , board_title , board_content , board_writer , board_readcount)
values(4 , '네번째 계시물' , '안녕하세요~~' , 'kh13java' , 2000000);
SELECT * FROM board;

/*
	시퀀스(sequence) 
	- 데이터베이스 객체 중 하나
	- 번호 생성기
	- 테이블과 세트로 사용하는 경우가 많으며 "기본키" 생성하는 목적으로 주로 사용 
 */


-- 시퀀스의 자세한 정보 확인
select * from user_sequences;

/*
	날짜 데이터
	- date 또는 timestamp 형태를 사용
	- date는 초까지, timestamp는 밀리초까지 저장
	- java.sql.Date 클래스와 date 형태가 호환됨
	- java.sql.Timestamp 클래스와 timestamp 형태가 호환됨
	- 연/월/일/시/분/초(+밀리초)가 모두 필요한 경우 사용한다
	- 변환명령은 to_date()
	- 변환 형식 : Y(연도), M(월), D(일), HH/HH24(시간), MI(분), S(초)
	- 현재시각을 구하는 키워드가 존재 (sysdate/systimestamp)
	- 날짜는 더하기 빼기가 가능(단위 : 일)
 */
drop sequence funding_seq;
create sequence funding_seq;
drop table funding;
create table funding(
funding_no number primary key,
funding_title varchar2(90) not null,
funding_dest number not null,
funding_begin date not null,
funding_end date not null
);
-- 날짜는 문자열로도 설정이 가능하다
insert into funding(
	funding_no, funding_title, funding_dest, 
	funding_begin, funding_end
)
values(
	funding_seq.nextval, '자바 서적', 500000, 
	'2024-01-10', '2024-01-31'
);
-- 변환 명령을 사용하면 더 정확하게 형식을 지정할 수 있다
-- to_date(값, 형식)
insert into funding(
	funding_no, funding_title, funding_dest, 
	funding_begin, funding_end
)
values(
	funding_seq.nextval, '데이터베이스 서적', 600000, 
	to_date('2024-01-10', 'YYYY-MM-DD'),
	to_date('2024-01-31', 'YYYY-MM-DD')
);

insert into funding(
	funding_no, funding_title, funding_dest, 
	funding_begin, funding_end
)
values(
	funding_seq.nextval, '웹 개발 서적', 700000, 
	to_date('2024-01-05 10:58:30', 'YYYY-MM-DD HH24:MI:SS'),
	to_date('2024-01-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
);

insert into funding(
	funding_no, funding_title, funding_dest, 
	funding_begin, funding_end
)
values(
	funding_seq.nextval, '클라우드 서적', 750000, 
	sysdate,
	to_date('2024-01-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
);

insert into funding(
	funding_no, funding_title, funding_dest, 
	funding_begin, funding_end
)
values(
	funding_seq.nextval, '한달짜리 펀딩', 750000, 
	sysdate, sysdate+30
);

select * from funding;

-------------------------------------------------------------

drop sequence book_seq;
create sequence book_seq;

drop table book;
create table book(
book_id number primary key,
book_title varchar2(300) not null,
book_author varchar2(90) 
	check(regexp_like(book_author, '^[^!@#$]+$')),
book_publication_date char(10) 
	check(regexp_like(book_publication_date, '^([0-9]{4})-(02-(0[1-9]|1[0-9]|2[0-8])|(0[469]|11)-(0[1-9]|1[0-9]|2[0-9]|30)|(0[13578]|1[02])-(0[1-9]|1[0-9]|2[0-9]|3[01]))$')),
book_price number(*, 2) default 0 not null check(book_price >= 0),
book_publisher varchar2(90),
book_page_count number not null check(book_page_count >= 1),
book_genre varchar2(15) not null
);

INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(1, 'Harry Potter 1', 'J.K. Rowling', '2001-06-26', 19.99, 'Scholastic', 320, 'Fantasy');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(2, 'To Kill a Mockingbird', 'Harper Lee', '1960-07-11', 14.99, 'Grand Central Publishing', 336, 'Classic');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(3, 'The Great Gatsby', 'F. Scott Fitzgerald', '1925-04-10', 12.99, 'Scribner', 180, 'Classic');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(4, '1984', 'George Orwell', '1949-06-08', 10.99, 'Secker & Warburg', 328, 'Dystopian');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(5, 'Pride and Prejudice', 'Jane Austen', '1813-01-28', 9.99, 'Penguin Classics', 432, 'Romance');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(6, 'The Hobbit', 'J.R.R. Tolkien', '1937-09-21', 15.99, 'Houghton Mifflin Harcourt', 320, 'Fantasy');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(7, 'The Catcher in the Rye', 'J.D. Salinger', '1951-07-16', 11.99, 'Little, Brown and Company', 224, 'Classic');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(8, 'Lord of the Rings', 'J.R.R. Tolkien', '1954-07-29', 29.99, 'Allen & Unwin', 1178, 'Fantasy');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(9, 'To the Lighthouse', 'Virginia Woolf', '1927-05-05', 13.99, 'Harcourt, Brace and Company', 209, 'Modernist');
INSERT INTO BOOK(book_id, book_title, book_author, book_publication_date, book_price, book_publisher, book_page_count, book_genre) VALUES(10, 'The Alchemist', 'Paulo Coelho', '1988-06-01', 9.99, 'HarperOne', 208, 'Fiction');
select * from book;
---------------------------------------------------------

/*
 * 조회 (SELECT)
데이터베이스에 저장된 데이터들을 원하는 기준에 맞게 읽어내는 것
SELECT 항목 FROM 테이블
*/

-- 전체 도서 조회
SELECT * FROM BOOK;
SELECT book. * from book;

--도서 명만 조회
SELECT book_title FroM BOOK;

--도서명과 페이지만 조회
SELECT book_title , book_page_count from book;

--항목을 계산하여 추가로 조회할 수 있다
SELECT book_title,LENGTH(book_title) from book;
SELECT  book_title "도서 제목" , length(book_title) "제목 글자수" from book; --따옴표 2개 

--도서명과 출간년도를 조회하고 싶은 경우
--substr(항목 , 시작위치 , 글자수)
	SELECT book_title 도서명 , 
	SUBSTR(BOOK_PUBLICATION_DATE, 1,4)  출간년도
	from book;

-- 조건 
-- - 제시한 조건에 부합하는 데이터만 조회(필터링)
-- - 조회구문 뒤에`where 조건식`을 추가
select * from book where book_price < 10; -- 10달러 미만인 친구만 보겠다

-- 10 ~ 15사이의 도서만 조회
select * from book where book_price >= 10 and book_price <= 15;
select * from book where book_price between 10 and 15;

select * from book where book_id = 5;
select * from book where book_id != 5;
-- table 의 카피본이다

-- 문자 조건
-- [1] 장르가 Fantasy인 도서를 조회 (오라클은 문자도 = 로 비교)
select * from book where BOOK_GENRE = 'Fantasy';
select * from book where LOWER(BOOK_GENRE) = 'fantasy'; -- 소문자로 치환

-- [2] T로 시작하는 도서 조회
-- like 연산자는 패턴을 지정할 때 사용하며 %는 해당 자리는 무관하다는 뜻
-- instr 함수는 지정한 글자가 어느 위치에 있는지 알아내는 명령
-- 시작검사만큼은 like 연산자가 매우 빠르며, 나머지는 전반적으로 instr 함수가 
select * from book where book_title like 'T%';
select * from book where instr(book_title,'T') = 1; --T가 1번위치에 있는지

--[1] 풀이
select * from book where LOWER(BOOK_TITLE) like '%h%';
select * from book where instr(LOWER(BOOK_TITLE) ,'h') > 0;

--[2] 풀이
select * from book where instr(book_author,'J') = 1;

--[3] 풀이
select * from book where BOOK_PUBLISHER  like '%Company';

--[4] 풀이 : 도서명에 숫자가 들어간 도서를 조회
select * from book where regexp_like(BOOK_TITLE,'[0-9]+'); -- 시작 종료기호 생략

--날짜

drop table product;
create table product(
no number primary key,
name varchar2(30) not null,
type varchar2(15) check(type in ('과자','아이스크림','주류','사탕')),
price number,
made date,
expire date
);

insert into product values(1, '스크류바', '아이스크림', 1200, '2020-05-01', '2020-10-01');
insert into product values(2, '마이쮸', '사탕', 900, '2020-01-01', '2021-01-01');
insert into product values(3, '초코파이', '과자', 3000, '2020-01-01', '2021-01-01');
insert into product values(4, '맛동산', '과자', 2200, '2020-02-01', '2020-10-20');
insert into product values(5, '참이슬', '주류', 1000, '2020-01-05', '2020-04-05');
insert into product values(6, '처음처럼', '주류', 1000, '2020-03-15', '2020-08-15');
insert into product values(7, '바나나킥', '과자', 1500, '2020-05-03', '2020-06-03');
insert into product values(8, '빠삐코', '아이스크림', 1000, '2019-12-01', '2020-06-01');
insert into product values(9, '멘토스', '사탕', 1200, '2020-03-20', '2020-12-31');
insert into product values(10, '오레오', '과자', 2100, '2019-06-01', '2020-06-01');

-- 날짜 조건
-- - 특정 항목을 검사하거나 기간으로 검색하는 경우가 많다
SELECT * FROM  PRODUCT

-- 2020년에 제조된 상품 조회
SELECT * FROM PRODUCT where EXTRACT(year from made) = 2020;
SELECT  * FROM PRODUCT where to_char(made , 'YYYY') = '2020';
SELECT * FROM PRODUCT where 
made BETWEEN 
	to_date('2020-01-01 00:00:00' , 'YYYY-MM-DD HH24:MI:SS')
	AND 
	to_date('2020-12-31 23:59:59' , 'YYYY-MM-DD HH24:MI:SS');

-- (Q) 여름에 제조한 상품 목록 조회 (6,7,8월)

SELECT  * FROM PRODUCT where to_char(made , 'MM') in ('06','07','08'); 

-- (Q) 2019년 하반기에 제조한 상품 목록 조회(7~12월)
	
SELECT * FROM PRODUCT where made BETWEEN 
	to_date('2019-07-01 00:00:00' , 'YYYY-MM-DD HH24:MI:SS')
	and 
	to_date('2019-12-31 23:59:59' , 'YYYY-MM-DD HH24:MI:SS');

-- (Q) 2020년 이후에 현재까지 제조한 상품 목록 조회
SELECT * FROM PRODUCT where made BETWEEN 
	to_date('2020-01-01 00:00:00' , 'YYYY-MM-DD HH24:MI:SS')
	and SYSDATE ;
-- (Q) 최근 5년간 제조한 상품 목록 조회 인증번호
SELECT * FROM PRODUCT where made BETWEEN 
	SYSDATE - 5*365 and SYSDATE ; 

-- () 5분
SELECT * FROM PRODUCT where made BETWEEN 
	SYSDATE - 5/24/60 and SYSDATE ; 

-- 정렬(order by)
-- 조건으로 데이터까지 다 골라냈다면 원하는 기준에 맞게 정렬할 수 있다
-- 조회 구문의 마지막에 `order by 항목 asc/desc`를 적는다
-- (중요) 조건보다 뒤에 작성되어야 한다

select * from book;
select * from product;

select * from book order by book_id asc; -- 오름차순
select * from product order by PRODUCT_PRICE desc; --내림차순

--(Q) 상품을 최근 제조한 순으로 조회(최신순)
select * from product order by made desc;
select * from product order by made desc , no asc;
--(Q) 이름순 -- ㄱㄴㄷ 오름차순
select * from product order by name asc;
select * from product order by name asc, no asc; --안전한 코드 겹치는거 불가
--(Q) 가격이 비싼순 - 내림차순
select * from product order by type asc, price desc , no asc; -- no asc primay key 조건

--(Q) 유통기한이 짧은순 - 
select * from product order by expire - made asc

select product.*,expire-made 유통기한 from product 
order by expire-made asc;

select product.*,expire-made "유통기한" from product 
order by expire-made asc, no asc;



















